# Remove rows with missing values
df <- na.omit(df)
# Drop a specific column (e.g., 'missing_values')
df <- df[, !names(df) %in% c("missing_values")]
# Initialize lists to store categorical and numeric columns
cat_cols <- c()
numeric_cols <- c()
# Loop through all columns to classify them as categorical or numeric
for (col in names(df)) {
unique_vals <- length(unique(df[[col]]))
# If the number of unique values is less than 10, classify as categorical
if (unique_vals < 10) {
cat_cols <- c(cat_cols, col)
} else {
numeric_cols <- c(numeric_cols, col)
}
}
# Define function to apply ordinal encoding to categorical columns
ordinal_encode <- function(series) {
unique_values <- unique(series)
unique_dict <- setNames(0:(length(unique_values) - 1), unique_values)
return(sapply(series, function(x) unique_dict[as.character(x)]))
}
# Apply ordinal encoding to categorical columns
for (col in cat_cols) {
df[[col]] <- ordinal_encode(df[[col]])
}
# Compute correlation matrix for numeric columns
corr <- cor(df[, numeric_cols])
# Load necessary library for heatmap
library(ggplot2)
library(reshape2)
# Plot the correlation matrix as a heatmap
corr_melted <- melt(corr)
ggplot(corr_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Correlation Heatmap", x = "Variables", y = "Variables")
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Compute correlation matrix for numeric columns
corr <- cor(df[, numeric_cols])
# Melt the correlation matrix to create a tidy format for plotting
corr_melted <- melt(corr)
# Create a professional heatmap plot for the correlation matrix
ggplot(corr_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
name = "Correlation Coefficient") +
theme_minimal(base_size = 15) +  # Base font size for readability
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),   # Rotate axis labels for better visibility
axis.text.y = element_text(size = 12),                          # Adjust axis text size
axis.title = element_text(size = 14),                           # Title size
plot.title = element_text(size = 16, hjust = 0.5),              # Title size and centering
panel.grid = element_blank(),                                    # Remove grid lines for cleaner look
legend.position = "right") +                                     # Position legend to the right
labs(title = "Correlation Heatmap of Numeric Variables",               # Title of the plot
x = "Variables",                                                  # X-axis label
y = "Variables") +                                                # Y-axis label
coord_fixed()  # Ensure the heatmap cells are square
#### Assume `df` is your data frame and `numeric_cols` contains the names of numeric columns####
numeric_cols <- c("age", "chol", "trestbps", "thalach", "oldpeak")  # Adjust the column names accordingly
# Create a grid of plots
par(mfrow = c(5, 2), mar = c(4, 4, 2, 1))  # Adjust the layout to have 5 rows and 2 columns
# Loop over the first 10 numeric columns and generate boxplots
for (col in numeric_cols) {
boxplot(
df[[col]],
main = paste("Boxplot of", col),
col = "skyblue",
border = "blue",
horizontal = TRUE,
outline = TRUE,  # Show outliers
xlab = "Values",
ylab = col
)
}
# Reduce the margin size to prevent the error
par(mfrow = c(5, 2), mar = c(2, 4, 2, 1))  # Adjust margins (bottom, left, top, right)
# Loop over the numeric columns and generate boxplots
for (col in numeric_cols) {
boxplot(
df[[col]],
main = paste("Boxplot of", col),
col = "skyblue",
border = "blue",
horizontal = TRUE,
outline = TRUE,  # Show outliers
xlab = "Values",
ylab = col
)
}
# Reset to default layout
par(mfrow = c(1, 1))
# Adjust the layout for multiple boxplots and fine-tune the margins
par(mfrow = c(5, 2), mar = c(5, 5, 3, 2))  # Adjust margins (bottom, left, top, right)
# Loop over the numeric columns and generate boxplots with professional aesthetics
for (col in numeric_cols) {
boxplot(
df[[col]],
main = paste("Boxplot of", col),            # Add informative title
col = "skyblue",                            # Color for the box
border = "blue",                            # Color of the box border
horizontal = TRUE,                          # Plot horizontally
outline = TRUE,                             # Show outliers
xlab = "Values",                            # Label for X-axis
ylab = col,                                 # Label for Y-axis
cex.main = 1.5,                             # Increase the title size
cex.lab = 1.2,                              # Increase axis label size
cex.axis = 1.2,                             # Increase axis text size
las = 1,                                    # Rotate axis labels for better readability
main.col = "black",                         # Set the title color
boxwex = 0.5,                               # Adjust the box width
notch = TRUE,                               # Add notch for better visualization of medians
col.axis = "black",                         # Color of axis ticks and labels
col.lab = "black"                           # Color of axis labels
)
}
# Reset to default layout
par(mfrow = c(1, 1))
#### Assume `df` is your data frame and `numeric_cols` contains the names of numeric columns####
# Reduce the margin size to prevent the error
par(mfrow = c(5, 2), mar = c(2, 4, 2, 1))  # Adjust margins (bottom, left, top, right)
# Loop over the numeric columns and generate boxplots
for (col in numeric_cols) {
boxplot(
df[[col]],
main = paste("Boxplot of", col),
col = "skyblue",
border = "blue",
horizontal = TRUE,
outline = TRUE,  # Show outliers
xlab = "Values",
ylab = col
)
}
# Reset to default layout
par(mfrow = c(1, 1))
# Plot the first 5 columns
par(mfrow = c(3, 2), mar = c(4, 4, 2, 1))  # Adjust layout
# Loop over the first 5 numeric columns and generate boxplots
for (col in numeric_cols[1:5]) {
boxplot(
df[[col]],
main = paste("Boxplot of", col),
col = "skyblue",
border = "blue",
horizontal = TRUE,
outline = TRUE,  # Show outliers
xlab = "Values",
ylab = col
)
}
# Reset to default layout
par(mfrow = c(1, 1))
# Load necessary libraries
library(ggplot2)
library(tidyr)
# Reshape the data to long format
df_long <- gather(df, key = "Variable", value = "Value", all_of(numeric_cols))
# Create boxplots using ggplot2
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_boxplot(outlier.colour = "black", outlier.shape = 16, outlier.size = 2) +
labs(title = "Boxplots of Numeric Variables", x = "Variables", y = "Values") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(ggplot2)
library(tidyr)
# Reshape the data to long format for ggplot2
df_long <- gather(df, key = "Variable", value = "Value", all_of(numeric_cols))
# Create boxplots using ggplot2
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_boxplot(
outlier.colour = "black",       # Color of outliers
outlier.shape = 16,             # Shape of outliers (circle)
outlier.size = 2,               # Size of outliers
notch = TRUE                    # Add notch for better visualization of the median
) +
labs(
title = "Boxplots of Numeric Variables",    # Title of the plot
x = "Variables",                          # Label for x-axis
y = "Values"                               # Label for y-axis
) +
theme_minimal() +                          # Minimal theme for a clean look
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels and set size
axis.text.y = element_text(size = 12),                            # Set size of y-axis labels
axis.title.x = element_text(size = 14),                           # Set size of x-axis title
axis.title.y = element_text(size = 14),                           # Set size of y-axis title
plot.title = element_text(size = 16, hjust = 0.5),               # Set title size and center it
legend.position = "none"                                           # Remove legend for cleaner look
) +
scale_fill_brewer(palette = "Set3")     # Use a professional color palette
# Reshape the data to long format
df_long <- gather(df, key = "Variable", value = "Value", all_of(numeric_cols))
# Create boxplots using ggplot2
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_boxplot(outlier.colour = "black", outlier.shape = 16, outlier.size = 2) +
labs(title = "Boxplots of Numeric Variables", x = "Variables", y = "Values") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(ggplot2)
library(tidyr)
# Reshape the data to long format for ggplot2
df_long <- gather(df, key = "Variable", value = "Value", all_of(numeric_cols))
# Create boxplots using ggplot2
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_boxplot(
outlier.colour = "black",       # Color of outliers
outlier.shape = 16,             # Shape of outliers (circle)
outlier.size = 2,               # Size of outliers
notch = TRUE                    # Add notch for better visualization of the median
) +
labs(
title = "Boxplots of Numeric Variables",    # Title of the plot
x = "Variables",                          # Label for x-axis
y = "Values"                               # Label for y-axis
) +
theme_minimal() +                          # Minimal theme for a clean look
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels and set size
axis.text.y = element_text(size = 12),                            # Set size of y-axis labels
axis.title.x = element_text(size = 14),                           # Set size of x-axis title
axis.title.y = element_text(size = 14),                           # Set size of y-axis title
plot.title = element_text(size = 16, hjust = 0.5),               # Set title size and center it
legend.position = "none"                                           # Remove legend for cleaner look
) +
scale_fill_brewer(palette = "Set3")     # Use a professional color palette
library(keras)
library(tensorflow)
install.packages("keras")
install.packages("tensorflow")
# Load necessary libraries
library(keras)
library(tensorflow)
library(ggplot2)
# Data preparation: split data into train and test sets
set.seed(123)
keras_df <- df
# Split the data into 90% train and 10% test
keras_train_set <- keras_df[sample(nrow(keras_df), 0.9 * nrow(keras_df)), ]
keras_test_set <- keras_df[!rownames(keras_df) %in% rownames(keras_train_set), ]
# Separate features and target
keras_train_features <- keras_train_set
keras_train_targets <- keras_train_features$chol
keras_train_features <- keras_train_features[, !(colnames(keras_train_features) %in% c("chol"))]
keras_test_features <- keras_test_set
keras_test_targets <- keras_test_features$chol
keras_test_features <- keras_test_features[, !(colnames(keras_test_features) %in% c("chol"))]
# Normalize the features
normalizer <- layer_normalization()
# Assuming df is your dataset and the target column is 'chol'
set.seed(123)
# Split the data into 90% train and 10% test
keras_df <- df
keras_train_set <- keras_df[sample(nrow(keras_df), 0.9 * nrow(keras_df)), ]
keras_test_set <- keras_df[!rownames(keras_df) %in% rownames(keras_train_set), ]
# Separate features and target
keras_train_features <- keras_train_set
keras_train_targets <- keras_train_features$chol
keras_train_features <- keras_train_features[, !(colnames(keras_train_features) %in% c("chol"))]
keras_test_features <- keras_test_set
keras_test_targets <- keras_test_features$chol
keras_test_features <- keras_test_features[, !(colnames(keras_test_features) %in% c("chol"))]
# Normalize the features
keras_train_features <- as.matrix(keras_train_features)  # Convert to matrix
keras_test_features <- as.matrix(keras_test_features)
normalizer <- layer_normalization()
library(keras)
install_keras()
.rs.restartR()
install.packages("keras")  # Install the keras package
install.packages("keras")
library(keras)
install_keras()  # This will install both Keras and TensorFlow in a clean environment
library(tensorflow)
.rs.restartR()
# Load necessary libraries
library(ggplot2)
library(tidyr)
# Reshape the data to long format
df_long <- gather(df, key = "Variable", value = "Value", all_of(numeric_cols))
# Create boxplots using ggplot2
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_boxplot(outlier.colour = "black", outlier.shape = 16, outlier.size = 2) +
labs(title = "Boxplots of Numeric Variables", x = "Variables", y = "Values") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(ggplot2)
library(corrplot)
# Assume `df` is your dataset
numeric_df <- df[, sapply(df, is.numeric)]  # Select numeric columns
# Compute correlation matrix
cor_matrix <- cor(numeric_df)
# Plot the correlation heatmap
corrplot(cor_matrix, method = "color", type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),
title = "Correlation Heatmap",
mar = c(0, 0, 2, 0))
# Load necessary libraries
library(corrplot)
# Select numeric columns
numeric_df <- df[, sapply(df, is.numeric)]  # Select numeric columns only
# Compute the correlation matrix
cor_matrix <- cor(numeric_df)
# Plot the correlation heatmap with professional adjustments
corrplot(cor_matrix, method = "color", type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),  # Color gradient from blue to red
title = "Correlation Heatmap",
mar = c(0, 0, 2, 0),  # Adjust margins to avoid cutting off text
addgrid.col = "grey",  # Adding grid lines for clarity
tl.col = "black",  # Text label color
tl.cex = 1.2,  # Adjust text label size
cl.lim = c(-1, 1))  # Set color scale limits to ensure proper scaling
# Load necessary libraries
library(ggplot2)
library(tidyr)
# Reshape the data to long format for ggplot
df_long <- gather(df, key = "Variable", value = "Value", all_of(numeric_cols))
# Create boxplots using ggplot2 with professional adjustments
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_boxplot(outlier.colour = "black", outlier.shape = 16, outlier.size = 2,
notch = TRUE, color = "black") +  # Added notches for better visibility
labs(title = "Boxplot of Numeric Variables", x = "Variables", y = "Values") +
scale_fill_brewer(palette = "Set3") +  # Using a professional color palette
theme_minimal(base_size = 15) +  # Enhanced theme for readability
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Tilted axis text for clarity
plot.title = element_text(hjust = 0.5))  # Center title
# Load necessary libraries
library(corrplot)
# Select numeric columns
numeric_df <- df[, sapply(df, is.numeric)]  # Select numeric columns only
# Compute the correlation matrix
cor_matrix <- cor(numeric_df)
# Plot the correlation heatmap with professional adjustments
corrplot(cor_matrix, method = "color", type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),  # Color gradient from blue to red
title = "Correlation Heatmap",
mar = c(0, 0, 2, 0),  # Adjust margins to avoid cutting off text
addgrid.col = "grey",  # Adding grid lines for clarity
tl.col = "black",  # Text label color
tl.cex = 1.2,  # Adjust text label size
cl.lim = c(-1, 1))  # Set color scale limits to ensure proper scaling
# Load necessary libraries
library(corrplot)
# Select numeric columns
numeric_df <- df[, sapply(df, is.numeric)]  # Select numeric columns only
# Compute the correlation matrix
cor_matrix <- cor(numeric_df)
# Plot the correlation heatmap with professional adjustments
corrplot(cor_matrix, method = "color", type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),  # Color gradient from blue to red
title = "Correlation Heatmap",
mar = c(5, 5, 2, 1),  # Adjust margins to avoid cutting off text
addgrid.col = "grey",  # Adding grid lines for clarity
tl.col = "black",  # Text label color
tl.cex = 1.2,  # Adjust text label size
tl.srt = 45,  # Rotate text labels to avoid overlap
number.cex = 0.7)  # Reduce size of correlation numbers for better spacing
# Reshape the data to long format
df_long <- gather(df, key = "Variable", value = "Value", all_of(numeric_cols))
# Create boxplots using ggplot2
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_boxplot(outlier.colour = "black", outlier.shape = 16, outlier.size = 2) +
labs(title = "Boxplots of Numeric Variables", x = "Variables", y = "Values") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(ggplot2)
library(corrplot)
# Assume `df` is your dataset
numeric_df <- df[, sapply(df, is.numeric)]  # Select numeric columns
# Compute correlation matrix
cor_matrix <- cor(numeric_df)
# Plot the correlation heatmap
corrplot(cor_matrix, method = "color", type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),
title = "Correlation Heatmap",
mar = c(0, 0, 2, 0))
# Load necessary libraries
library(caret)
library(ggplot2)
library(e1071)  # For confusionMatrix
library(pROC)
# Define features and target variable
# Assume df is your dataframe, remove the columns that are not relevant for modeling
X <- df[, !colnames(df) %in% c('num', 'age_group', 'cholesterol_level', 'bp_level', 'risk_factor', 'avg_chol_by_age_group', 'symptom_severity_diff')]
y <- df$num
# Split the data into training and testing sets (80% train, 20% test)
set.seed(42)  # Ensure reproducibility
trainIndex <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[trainIndex, ]
y_train <- y[trainIndex]
X_test <- X[-trainIndex, ]
y_test <- y[-trainIndex]
# Train a logistic regression model
log_model <- glm(y_train ~ ., data = X_train, family = binomial())
# Ensure that 'num' is a binary factor with 0 and 1
y <- ifelse(y == "No Disease", 0, 1)  # Convert 'No Disease' to 0, 'Disease' to 1
y <- factor(y, levels = c(0, 1))  # Make sure it's a factor with valid levels
# Split the data into training and testing sets (80% train, 20% test)
set.seed(42)  # Ensure reproducibility
trainIndex <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[trainIndex, ]
y_train <- y[trainIndex]
X_test <- X[-trainIndex, ]
y_test <- y[-trainIndex]
# Train a logistic regression model
log_model <- glm(y_train ~ ., data = X_train, family = binomial())
# View the model summary
summary(log_model)
# Check correlation matrix to identify highly correlated variables
cor_matrix <- cor(X_train)
highly_correlated <- findCorrelation(cor_matrix, cutoff = 0.9)  # Identify highly correlated features (cutoff 0.9)
# Remove highly correlated features from X_train and X_test
X_train <- X_train[, -highly_correlated]
X_test <- X_test[, -highly_correlated]
# Standardize the data (normalize)
X_train_scaled <- scale(X_train)
X_test_scaled <- scale(X_test)
# Train logistic regression with scaled data
log_model <- glm(y_train ~ ., data = as.data.frame(X_train_scaled), family = binomial())
# View the model summary
summary(log_model)
# Ensure the necessary libraries are loaded
library(caret)
library(ggplot2)
library(reshape2)
# Assuming y_pred_class has been generated by your model
# Calculate accuracy
accuracy <- mean(y_pred_class == y_test)
# Assuming you've trained a logistic regression model called `log_model`
# 1. Generate predictions for the test set
y_pred_prob <- predict(log_model, newdata = X_test, type = "response")  # For logistic regression
y_pred_class <- ifelse(y_pred_prob > 0.5, 1, 0)  # Convert probabilities to binary class labels
# 2. Calculate accuracy
accuracy <- mean(y_pred_class == y_test)
print(paste("Model Accuracy: ", accuracy))
# 3. Confusion Matrix
conf_matrix <- confusionMatrix(as.factor(y_pred_class), as.factor(y_test))
print(conf_matrix)
# 4. Plot Confusion Matrix Heatmap
cm_matrix <- as.matrix(conf_matrix$table)
ggplot(melt(cm_matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "white", size = 8) +
labs(title = "Confusion Matrix", x = "Predicted", y = "Actual") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal()
# Print the first few predicted and actual values
head(data.frame(Predicted = y_pred_class, Actual = y_test))
# Check the distribution of predictions and actual labels
table(Predicted = y_pred_class, Actual = y_test)
# Ensure that the factor levels match
y_pred_class <- factor(y_pred_class, levels = c(0, 1))
y_test <- factor(y_test, levels = c(0, 1))
# Recalculate the confusion matrix
conf_matrix <- confusionMatrix(y_pred_class, y_test)
print(conf_matrix)
# Ensure the confusion matrix is in the right format
cm_matrix <- as.matrix(conf_matrix$table)
# Use reshape2::melt() to convert the confusion matrix into a long format
library(reshape2)
cm_matrix_melted <- melt(cm_matrix)
# Plot the confusion matrix heatmap
ggplot(cm_matrix_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "white", size = 8) +
labs(title = "Confusion Matrix", x = "Predicted", y = "Actual") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Ensure the confusion matrix is in the right format
cm_matrix <- as.matrix(conf_matrix$table)
# Use reshape2::melt() to convert the confusion matrix into a long format
library(reshape2)
cm_matrix_melted <- melt(cm_matrix)
# Check the structure of the melted matrix to understand the column names
str(cm_matrix_melted)
# Plot the confusion matrix heatmap with the correct column names
ggplot(cm_matrix_melted, aes(x = Var1, y = Var2, fill = value)) +  # Ensure 'Var1' and 'Var2' exist in the melted data
geom_tile() +
geom_text(aes(label = value), color = "white", size = 8) +
labs(title = "Confusion Matrix", x = "Predicted", y = "Actual") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Ensure the confusion matrix is in the right format
cm_matrix <- as.matrix(conf_matrix$table)
# Use reshape2::melt() to convert the confusion matrix into a long format
library(reshape2)
cm_matrix_melted <- melt(cm_matrix)
# Check the structure of the melted matrix to see column names
str(cm_matrix_melted)
# Display the first few rows to check the column names
head(cm_matrix_melted)
# Rename columns to match the expected names for ggplot
colnames(cm_matrix_melted) <- c("Predicted", "Actual", "Count")
# Plot the confusion matrix heatmap
ggplot(cm_matrix_melted, aes(x = Predicted, y = Actual, fill = Count)) +
geom_tile() +
geom_text(aes(label = Count), color = "white", size = 8) +
labs(title = "Confusion Matrix", x = "Predicted", y = "Actual") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
